strict digraph G {
gdma_1099;
tp_1100;
TasksContainerKeyType_1101;
TasksContainerKeyType_1103;
operator_other_1104;
TasksContainerKeyType_1106;
if_1107;
delete_m_taskPtr_1108;
if_1112;
delete_m_taskPtr_1113;
m_taskPtr_other_m_taskPtr_1115;
other_m_taskPtr_0_1116;
m_takeTasksOwnership_other_m_takeTasksOwnership_1117;
m_id_other_m_id_1118;
m_status_other_m_status_1119;
return_1120;
ThreadsVector_1122;
ThreadsVector_1124;
clear_1125;
ThreadsVector_1127;
return_1130;
add_1132;
m_threads_push_back_shared_ptr_thread_threadPtr_1133;
empty_1135;
return_1136;
size_1138;
return_1139;
clear_1141;
for_1142;
m_threads_threadsIdx_join_1143;
m_threads_clear_1145;
ExecuterStatusHandler_1147;
unique_lock_mutex_locker_mutexPtr_1148;
m_activeThreadsNumberCounterPtr_activeThreadsNumberCounterPtr_1149;
m_executerStatusPtr_executerStatusPtr_1150;
m_mutexPtr_mutexPtr_1151;
m_activeThreadsNumberCounterPtr_1152;
m_executerStatusPtr_ACTIVE_EXECUTER_1153;
ExecuterStatusHandler_1155;
unique_lock_mutex_locker_m_mutexPtr_1156;
m_activeThreadsNumberCounterPtr_1157;
if_1158;
m_executerStatusPtr_INACTIVE_EXECUTER_1159;
Executer_1162;
reset_1163;
Executer_1165;
reset_1166;
Executer_1168;
unique_lock_mutex_locker_m_mutex_1169;
if_1170;
throw_runtime_error_Invalid_executer_status_at_destruction_time_1171;
setExecutionParams_1174;
stopExecution_1175;
unique_lock_mutex_locker_m_mutex_1176;
reset_1177;
m_takeTasksOwnership_takeTasksOwnership_1178;
switch_1179;
case_1180;
m_executionMode_SINGLE_1182;
m_maxThreadsNumber_0_1183;
m_threadsExecutionCommand_THREAD_PROCESS_NEXT_AND_EXIT_1184;
break_1185;
case_1187;
m_executionMode_SEQUENTIAL_1189;
m_maxThreadsNumber_0_1190;
m_threadsExecutionCommand_THREAD_PROCESS_ALL_AND_EXIT_1191;
break_1192;
case_1194;
m_executionMode_CONCURRENT_1196;
m_maxThreadsNumber_threadsNumber_threadsNumber_te_common_GetPhysProcNumber_1197;
m_threadsExecutionCommand_THREAD_PROCESS_ALL_AND_SLEEP_1198;
break_1199;
default_throw_runtime_error_Invalid_execution_mode_1201;
return_1203;
startExecution_1205;
unique_lock_mutex_locker_m_mutex_1206;
if_1207;
if_1208;
m_executerStatus_ACTIVE_EXECUTER_1209;
locker_unlock_1210;
threadFunction_m_threadParameters_1211;
locker_lock_1212;
else_if_1214;
m_executerStatus_ACTIVE_EXECUTER_1215;
locker_unlock_1216;
threadFunction_m_threadParameters_1217;
locker_lock_1218;
else_if_1220;
if_1221;
throw_runtime_error_Invalid_execution_status_1222;
m_executerStatus_ACTIVE_EXECUTER_1224;
for_1225;
m_threadsVector_add_new_thread_threadFunction_m_threadParameters_1226;
locker_unlock_1228;
m_awakeAllThreadsExecutionCondVar_notify_all_1229;
else_1231;
throw_runtime_error_Invalid_execution_mode_1232;
stopExecution_1236;
unique_lock_mutex_locker_m_mutex_1237;
if_1238;
const_ThreadsExecCommand_oldThreadsExecutionCommand_m_threadsExecutionCommand_1239;
m_threadsExecutionCommand_THREAD_EXIT_EXECUTION_1240;
locker_unlock_1241;
m_awakeAllThreadsExecutionCondVar_notify_all_1242;
m_threadsVector_clear_1243;
locker_lock_1244;
m_threadsExecutionCommand_oldThreadsExecutionCommand_1245;
waitExecution_1248;
unique_lock_mutex_locker_m_mutex_1249;
if_1250;
const_ThreadsExecCommand_oldThreadsExecutionCommand_m_threadsExecutionCommand_1251;
m_threadsExecutionCommand_THREAD_PROCESS_ALL_AND_EXIT_1252;
locker_unlock_1253;
m_awakeAllThreadsExecutionCondVar_notify_all_1254;
m_threadsVector_clear_1255;
m_threadsExecutionCommand_oldThreadsExecutionCommand_1256;
getExecutionMode_1259;
unique_lock_mutex_locker_m_mutex_1260;
return_1261;
getExecuterStatus_1263;
unique_lock_mutex_locker_m_mutex_1264;
return_1265;
addTask_1267;
unique_lock_mutex_locker_m_mutex_1268;
TasksContainerKeyType_key_1269;
if_1270;
return_1271;
key_m_takeTasksOwnership_m_takeTasksOwnership_1273;
key_m_status_INACTIVE_1274;
key_m_taskPtr_taskPtr_1275;
if_1276;
taskIdTypePtr_key_m_id_1277;
m_activeTasks_push_back_key_1279;
if_1280;
locker_unlock_1281;
m_awakeAllThreadsExecutionCondVar_notify_all_1282;
return_1284;
removeTask_1286;
unique_lock_mutex_locker_m_mutex_1287;
TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1288;
TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1289;
bool_taskFound_false_1290;
while_1291;
if_1292;
if_1293;
if_1294;
taskPtr_tasksIt_m_taskPtr_1295;
tasksIt_m_taskPtr_0_1296;
else_1299;
if_1300;
taskPtr_tasksIt_m_taskPtr_1301;
m_finishedTasks_erase_tasksIt_1304;
taskFound_true_1305;
break_1306;
tasksIt_1308;
if_1310;
tasksIt_m_activeTasks_begin_1311;
tasksItEnd_m_activeTasks_end_1312;
while_1313;
if_1314;
if_1315;
if_1316;
taskPtr_tasksIt_m_taskPtr_1317;
tasksIt_m_taskPtr_0_1318;
else_1321;
if_1322;
taskPtr_tasksIt_m_taskPtr_1323;
m_activeTasks_erase_tasksIt_1326;
taskFound_true_1327;
break_1328;
tasksIt_1330;
if_1333;
if_1334;
m_nextValidFreeTaskId_0_1335;
m_freeTasksIds_clear_1336;
return_1338;
else_1340;
return_1341;
setCallBack_1344;
unique_lock_mutex_locker_m_mutex_1345;
m_threadParameters_m_execCallBackPtr_newExecCallBack_1346;
reset_1348;
m_executerStatus_INACTIVE_EXECUTER_1349;
m_executionMode_SEQUENTIAL_1350;
m_threadsExecutionCommand_THREAD_EXIT_EXECUTION_1351;
m_takeTasksOwnership_false_1352;
m_maxThreadsNumber_0_1353;
m_nextValidFreeTaskId_0_1354;
m_activeTasks_clear_1355;
m_finishedTasks_clear_1356;
m_threadsVector_clear_1357;
m_freeTasksIds_clear_1358;
m_activeThreadsNumberCounter_0_1359;
m_threadParameters_m_threadsExecutionCommandPtr_m_threadsExecutionCommand_1360;
m_threadParameters_m_execCallBackPtr_0_1361;
m_threadParameters_m_activeTasksPtr_m_activeTasks_1362;
m_threadParameters_m_finishedTasksPtr_m_finishedTasks_1363;
m_threadParameters_m_mutexPtr_m_mutex_1364;
m_threadParameters_m_awakeAllThreadsExecutionMutexPtr_m_awakeAllThreadsExecutionMutex_1365;
m_threadParameters_m_awakeAllThreadsExecutionCondVarPtr_m_awakeAllThreadsExecutionCondVar_1366;
m_threadParameters_m_activeThreadsNumberCounterPtr_m_activeThreadsNumberCounter_1367;
m_threadParameters_m_executerStatusPtr_m_executerStatus_1368;
getUniqueTaskId_1370;
if_1371;
if_1372;
return_1373;
else_1375;
newId_m_nextValidFreeTaskId_1376;
m_nextValidFreeTaskId_1377;
return_1378;
else_1381;
TaskIdType_returnValue_m_freeTasksIds_back_1382;
m_freeTasksIds_pop_back_1383;
return_1384;
threadFunction_1387;
unique_lock_mutex_locker_threadParametersPtr_m_mutexPtr_defer_lock_1388;
unique_lock_mutex_awakeAllThreadsExecutionlocker_threadParametersPtr_m_awakeAllThreadsExecutionMutexPtr_defer_lock_1389;
ExecuterStatusHandler_executerStatusHandlerInstance_threadParametersPtr_m_activeThreadsNumberCounterPtr_threadParametersPtr_m_executerStatusPtr_threadParametersPtr_m_mutexPtr_1390;
TasksContainerType_iterator_activeTasksIt_1391;
TasksContainerType_iterator_activeTasksItEnd_1392;
TaskIdType_taskId_0_1393;
while_1394;
locker_lock_1395;
if_1396;
locker_unlock_1397;
return_1398;
else_1400;
locker_unlock_1401;
while_1402;
locker_lock_1403;
activeTasksIt_threadParametersPtr_m_activeTasksPtr_begin_1404;
activeTasksItEnd_threadParametersPtr_m_activeTasksPtr_end_1405;
while_1406;
if_1407;
break_1408;
activeTasksIt_1410;
if_1412;
if_1413;
locker_unlock_1414;
awakeAllThreadsExecutionlocker_lock_1415;
threadParametersPtr_m_awakeAllThreadsExecutionCondVarPtr_wait_awakeAllThreadsExecutionlocker_1416;
awakeAllThreadsExecutionlocker_unlock_1417;
else_1419;
locker_unlock_1420;
return_1421;
else_1424;
activeTasksIt_m_status_EXECUTING_1425;
taskId_activeTasksIt_m_id_1426;
locker_unlock_1427;
if_1428;
threadParametersPtr_m_execCallBackPtr_taskStarted_taskId_1429;
try_1431;
activeTasksIt_m_taskPtr_execute_1432;
catch_1434;
locker_lock_1436;
const_TaskExecutionResult_BasicResult_basicResult_activeTasksIt_m_taskPtr_getExecutionResult_getBasicResult_1437;
activeTasksIt_m_status_FINISHED_1438;
threadParametersPtr_m_finishedTasksPtr_push_back_activeTasksIt_1439;
threadParametersPtr_m_activeTasksPtr_erase_activeTasksIt_1440;
locker_unlock_1441;
if_1442;
threadParametersPtr_m_execCallBackPtr_taskExecuted_taskId_basicResult_1443;
locker_lock_1445;
if_1446;
locker_unlock_1447;
return_1448;
else_1450;
locker_unlock_1451;
isTaskPresent_1458;
unique_lock_mutex_locker_m_mutex_1459;
TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1460;
TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1461;
while_1462;
if_1463;
return_1464;
tasksIt_1466;
tasksIt_m_activeTasks_begin_1468;
tasksItEnd_m_activeTasks_end_1469;
while_1470;
if_1471;
return_1472;
tasksIt_1474;
return_1476;
getTaskStatus_1478;
unique_lock_mutex_locker_m_mutex_1479;
TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1480;
TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1481;
while_1482;
if_1483;
taskStatus_tasksIt_m_status_1484;
return_1485;
tasksIt_1487;
tasksIt_m_activeTasks_begin_1489;
tasksItEnd_m_activeTasks_end_1490;
while_1491;
if_1492;
taskStatus_tasksIt_m_status_1493;
return_1494;
tasksIt_1496;
return_1498;
Task_1655;
ThreadsExecCommand_1525;
BasicResult_1599;
final;
gdma_1099->operator_other_1104;
operator_other_1104->if_1112;
if_1112->delete_m_taskPtr_1113;
delete_m_taskPtr_1113->m_taskPtr_other_m_taskPtr_1115;
if_1112->m_taskPtr_other_m_taskPtr_1115;
m_taskPtr_other_m_taskPtr_1115->other_m_taskPtr_0_1116;
other_m_taskPtr_0_1116->m_takeTasksOwnership_other_m_takeTasksOwnership_1117;
m_takeTasksOwnership_other_m_takeTasksOwnership_1117->m_id_other_m_id_1118;
m_id_other_m_id_1118->m_status_other_m_status_1119;
m_status_other_m_status_1119->return_1120;
return_1120->return_1130;
for_1142->m_threads_threadsIdx_join_1143;
for_1142->m_threads_clear_1145;
unique_lock_mutex_locker_mutexPtr_1148->m_activeThreadsNumberCounterPtr_activeThreadsNumberCounterPtr_1149;
m_activeThreadsNumberCounterPtr_activeThreadsNumberCounterPtr_1149->m_executerStatusPtr_executerStatusPtr_1150;
m_executerStatusPtr_executerStatusPtr_1150->m_mutexPtr_mutexPtr_1151;
m_mutexPtr_mutexPtr_1151->m_activeThreadsNumberCounterPtr_1152;
m_activeThreadsNumberCounterPtr_1152->m_executerStatusPtr_ACTIVE_EXECUTER_1153;
m_executerStatus_INACTIVE_EXECUTER_1349->m_executionMode_SEQUENTIAL_1350;
m_executionMode_SEQUENTIAL_1350->m_threadsExecutionCommand_THREAD_EXIT_EXECUTION_1351;
m_threadsExecutionCommand_THREAD_EXIT_EXECUTION_1351->m_takeTasksOwnership_false_1352;
m_takeTasksOwnership_false_1352->m_maxThreadsNumber_0_1353;
m_maxThreadsNumber_0_1353->m_nextValidFreeTaskId_0_1354;
m_nextValidFreeTaskId_0_1354->m_activeTasks_clear_1355;
m_activeTasks_clear_1355->m_finishedTasks_clear_1356;
m_finishedTasks_clear_1356->m_threadsVector_clear_1357;
m_threadsVector_clear_1357->m_freeTasksIds_clear_1358;
m_freeTasksIds_clear_1358->m_activeThreadsNumberCounter_0_1359;
m_activeThreadsNumberCounter_0_1359->m_threadParameters_m_threadsExecutionCommandPtr_m_threadsExecutionCommand_1360;
m_threadParameters_m_threadsExecutionCommandPtr_m_threadsExecutionCommand_1360->m_threadParameters_m_execCallBackPtr_0_1361;
m_threadParameters_m_execCallBackPtr_0_1361->m_threadParameters_m_activeTasksPtr_m_activeTasks_1362;
m_threadParameters_m_activeTasksPtr_m_activeTasks_1362->m_threadParameters_m_finishedTasksPtr_m_finishedTasks_1363;
m_threadParameters_m_finishedTasksPtr_m_finishedTasks_1363->m_threadParameters_m_mutexPtr_m_mutex_1364;
m_threadParameters_m_mutexPtr_m_mutex_1364->m_threadParameters_m_awakeAllThreadsExecutionMutexPtr_m_awakeAllThreadsExecutionMutex_1365;
m_threadParameters_m_awakeAllThreadsExecutionMutexPtr_m_awakeAllThreadsExecutionMutex_1365->m_threadParameters_m_awakeAllThreadsExecutionCondVarPtr_m_awakeAllThreadsExecutionCondVar_1366;
m_threadParameters_m_awakeAllThreadsExecutionCondVarPtr_m_awakeAllThreadsExecutionCondVar_1366->m_threadParameters_m_activeThreadsNumberCounterPtr_m_activeThreadsNumberCounter_1367;
m_threadParameters_m_activeThreadsNumberCounterPtr_m_activeThreadsNumberCounter_1367->m_threadParameters_m_executerStatusPtr_m_executerStatus_1368;
reset_1163->reset_1166;
m_threadParameters_m_executerStatusPtr_m_executerStatus_1368->reset_1166;
reset_1166->stopExecution_1175;
unique_lock_mutex_locker_m_mutex_1237->if_1238;
if_1238->const_ThreadsExecCommand_oldThreadsExecutionCommand_m_threadsExecutionCommand_1239;
const_ThreadsExecCommand_oldThreadsExecutionCommand_m_threadsExecutionCommand_1239->m_threadsExecutionCommand_THREAD_EXIT_EXECUTION_1240;
m_threadsExecutionCommand_THREAD_EXIT_EXECUTION_1240->locker_unlock_1241;
locker_unlock_1241->m_awakeAllThreadsExecutionCondVar_notify_all_1242;
m_awakeAllThreadsExecutionCondVar_notify_all_1242->m_threadsVector_clear_1243;
m_threadsVector_clear_1243->locker_lock_1244;
locker_lock_1244->m_threadsExecutionCommand_oldThreadsExecutionCommand_1245;
m_threadsExecutionCommand_oldThreadsExecutionCommand_1245->stopExecution_1175;
if_1238->stopExecution_1175;
stopExecution_1175->unique_lock_mutex_locker_m_mutex_1176;
unique_lock_mutex_locker_m_mutex_1176->reset_1177;
m_threadParameters_m_executerStatusPtr_m_executerStatus_1368->reset_1177;
reset_1177->m_takeTasksOwnership_takeTasksOwnership_1178;
m_takeTasksOwnership_takeTasksOwnership_1178->switch_1179;
switch_1179->m_executionMode_SINGLE_1182;
m_executionMode_SINGLE_1182->m_maxThreadsNumber_0_1183;
m_maxThreadsNumber_0_1183->m_threadsExecutionCommand_THREAD_PROCESS_NEXT_AND_EXIT_1184;
m_threadsExecutionCommand_THREAD_PROCESS_NEXT_AND_EXIT_1184->return_1203;
unique_lock_mutex_locker_m_mutex_1206->if_1207;
if_1207->if_1208;
if_1208->m_executerStatus_ACTIVE_EXECUTER_1209;
m_executerStatus_ACTIVE_EXECUTER_1209->locker_unlock_1210;
locker_unlock_1210->threadFunction_m_threadParameters_1211;
unique_lock_mutex_locker_threadParametersPtr_m_mutexPtr_defer_lock_1388->unique_lock_mutex_awakeAllThreadsExecutionlocker_threadParametersPtr_m_awakeAllThreadsExecutionMutexPtr_defer_lock_1389;
unique_lock_mutex_awakeAllThreadsExecutionlocker_threadParametersPtr_m_awakeAllThreadsExecutionMutexPtr_defer_lock_1389->ExecuterStatusHandler_executerStatusHandlerInstance_threadParametersPtr_m_activeThreadsNumberCounterPtr_threadParametersPtr_m_executerStatusPtr_threadParametersPtr_m_mutexPtr_1390;
ExecuterStatusHandler_executerStatusHandlerInstance_threadParametersPtr_m_activeThreadsNumberCounterPtr_threadParametersPtr_m_executerStatusPtr_threadParametersPtr_m_mutexPtr_1390->TasksContainerType_iterator_activeTasksIt_1391;
TasksContainerType_iterator_activeTasksIt_1391->TasksContainerType_iterator_activeTasksItEnd_1392;
TasksContainerType_iterator_activeTasksItEnd_1392->TaskIdType_taskId_0_1393;
TaskIdType_taskId_0_1393->while_1394;
while_1394->locker_lock_1395;
locker_lock_1395->if_1396;
if_1396->locker_unlock_1397;
locker_unlock_1397->return_1398;
if_1396->else_1400;
else_1400->locker_unlock_1401;
locker_unlock_1401->while_1402;
while_1402->locker_lock_1403;
locker_lock_1403->activeTasksIt_threadParametersPtr_m_activeTasksPtr_begin_1404;
activeTasksIt_threadParametersPtr_m_activeTasksPtr_begin_1404->activeTasksItEnd_threadParametersPtr_m_activeTasksPtr_end_1405;
activeTasksItEnd_threadParametersPtr_m_activeTasksPtr_end_1405->while_1406;
while_1406->if_1407;
if_1407->activeTasksIt_1410;
activeTasksIt_1410->while_1406;
while_1406->if_1412;
if_1407->if_1412;
if_1412->if_1413;
if_1413->locker_unlock_1414;
locker_unlock_1414->awakeAllThreadsExecutionlocker_lock_1415;
awakeAllThreadsExecutionlocker_lock_1415->threadParametersPtr_m_awakeAllThreadsExecutionCondVarPtr_wait_awakeAllThreadsExecutionlocker_1416;
threadParametersPtr_m_awakeAllThreadsExecutionCondVarPtr_wait_awakeAllThreadsExecutionlocker_1416->awakeAllThreadsExecutionlocker_unlock_1417;
if_1413->else_1419;
else_1419->locker_unlock_1420;
locker_unlock_1420->return_1421;
if_1412->else_1424;
else_1424->activeTasksIt_m_status_EXECUTING_1425;
activeTasksIt_m_status_EXECUTING_1425->taskId_activeTasksIt_m_id_1426;
taskId_activeTasksIt_m_id_1426->locker_unlock_1427;
locker_unlock_1427->if_1428;
if_1428->threadParametersPtr_m_execCallBackPtr_taskStarted_taskId_1429;
threadParametersPtr_m_execCallBackPtr_taskStarted_taskId_1429->try_1431;
if_1428->try_1431;
try_1431->activeTasksIt_m_taskPtr_execute_1432;
activeTasksIt_m_taskPtr_execute_1432->catch_1434;
activeTasksIt_m_taskPtr_execute_1432->locker_lock_1436;
catch_1434->locker_lock_1436;
locker_lock_1436->const_TaskExecutionResult_BasicResult_basicResult_activeTasksIt_m_taskPtr_getExecutionResult_getBasicResult_1437;
const_TaskExecutionResult_BasicResult_basicResult_activeTasksIt_m_taskPtr_getExecutionResult_getBasicResult_1437->activeTasksIt_m_status_FINISHED_1438;
activeTasksIt_m_status_FINISHED_1438->threadParametersPtr_m_finishedTasksPtr_push_back_activeTasksIt_1439;
threadParametersPtr_m_finishedTasksPtr_push_back_activeTasksIt_1439->threadParametersPtr_m_activeTasksPtr_erase_activeTasksIt_1440;
threadParametersPtr_m_activeTasksPtr_erase_activeTasksIt_1440->locker_unlock_1441;
locker_unlock_1441->if_1442;
if_1442->threadParametersPtr_m_execCallBackPtr_taskExecuted_taskId_basicResult_1443;
threadParametersPtr_m_execCallBackPtr_taskExecuted_taskId_basicResult_1443->locker_lock_1445;
if_1442->locker_lock_1445;
locker_lock_1445->if_1446;
if_1446->locker_unlock_1447;
locker_unlock_1447->return_1448;
if_1446->else_1450;
else_1450->locker_unlock_1451;
awakeAllThreadsExecutionlocker_unlock_1417->while_1402;
locker_unlock_1451->while_1402;
while_1402->while_1394;
while_1394->threadFunction_m_threadParameters_1211;
return_1398->threadFunction_m_threadParameters_1211;
return_1421->threadFunction_m_threadParameters_1211;
return_1448->threadFunction_m_threadParameters_1211;
threadFunction_m_threadParameters_1211->locker_lock_1212;
if_1208->else_if_1214;
else_if_1214->m_executerStatus_ACTIVE_EXECUTER_1215;
m_executerStatus_ACTIVE_EXECUTER_1215->locker_unlock_1216;
locker_unlock_1216->threadFunction_m_threadParameters_1217;
while_1394->threadFunction_m_threadParameters_1217;
return_1398->threadFunction_m_threadParameters_1217;
return_1421->threadFunction_m_threadParameters_1217;
return_1448->threadFunction_m_threadParameters_1217;
threadFunction_m_threadParameters_1217->locker_lock_1218;
else_if_1214->else_if_1220;
else_if_1220->if_1221;
if_1221->m_executerStatus_ACTIVE_EXECUTER_1224;
if_1221->m_executerStatus_ACTIVE_EXECUTER_1224;
m_executerStatus_ACTIVE_EXECUTER_1224->for_1225;
for_1225->m_threadsVector_add_new_thread_threadFunction_m_threadParameters_1226;
while_1394->m_threadsVector_add_new_thread_threadFunction_m_threadParameters_1226;
return_1398->m_threadsVector_add_new_thread_threadFunction_m_threadParameters_1226;
return_1421->m_threadsVector_add_new_thread_threadFunction_m_threadParameters_1226;
return_1448->m_threadsVector_add_new_thread_threadFunction_m_threadParameters_1226;
m_threadsVector_add_new_thread_threadFunction_m_threadParameters_1226->for_1225;
for_1225->locker_unlock_1228;
locker_unlock_1228->m_awakeAllThreadsExecutionCondVar_notify_all_1229;
else_if_1220->else_1231;
unique_lock_mutex_locker_m_mutex_1249->if_1250;
if_1250->const_ThreadsExecCommand_oldThreadsExecutionCommand_m_threadsExecutionCommand_1251;
const_ThreadsExecCommand_oldThreadsExecutionCommand_m_threadsExecutionCommand_1251->m_threadsExecutionCommand_THREAD_PROCESS_ALL_AND_EXIT_1252;
m_threadsExecutionCommand_THREAD_PROCESS_ALL_AND_EXIT_1252->locker_unlock_1253;
locker_unlock_1253->m_awakeAllThreadsExecutionCondVar_notify_all_1254;
m_awakeAllThreadsExecutionCondVar_notify_all_1254->m_threadsVector_clear_1255;
m_threadsVector_clear_1255->m_threadsExecutionCommand_oldThreadsExecutionCommand_1256;
unique_lock_mutex_locker_m_mutex_1260->return_1261;
return_1261->unique_lock_mutex_locker_m_mutex_1264;
unique_lock_mutex_locker_m_mutex_1264->return_1265;
return_1265->unique_lock_mutex_locker_m_mutex_1268;
unique_lock_mutex_locker_m_mutex_1268->TasksContainerKeyType_key_1269;
TasksContainerKeyType_key_1269->if_1270;
if_1371->if_1372;
if_1372->return_1373;
if_1372->else_1375;
else_1375->newId_m_nextValidFreeTaskId_1376;
newId_m_nextValidFreeTaskId_1376->m_nextValidFreeTaskId_1377;
m_nextValidFreeTaskId_1377->return_1378;
if_1371->else_1381;
else_1381->TaskIdType_returnValue_m_freeTasksIds_back_1382;
TaskIdType_returnValue_m_freeTasksIds_back_1382->m_freeTasksIds_pop_back_1383;
m_freeTasksIds_pop_back_1383->return_1384;
return_1373->if_1270;
return_1378->if_1270;
return_1384->if_1270;
if_1270->return_1271;
if_1270->key_m_takeTasksOwnership_m_takeTasksOwnership_1273;
key_m_takeTasksOwnership_m_takeTasksOwnership_1273->key_m_status_INACTIVE_1274;
key_m_status_INACTIVE_1274->key_m_taskPtr_taskPtr_1275;
key_m_taskPtr_taskPtr_1275->if_1276;
if_1276->taskIdTypePtr_key_m_id_1277;
taskIdTypePtr_key_m_id_1277->m_activeTasks_push_back_key_1279;
if_1276->m_activeTasks_push_back_key_1279;
m_activeTasks_push_back_key_1279->if_1280;
if_1280->locker_unlock_1281;
locker_unlock_1281->m_awakeAllThreadsExecutionCondVar_notify_all_1282;
m_awakeAllThreadsExecutionCondVar_notify_all_1282->return_1284;
if_1280->return_1284;
unique_lock_mutex_locker_m_mutex_1287->TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1288;
TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1288->TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1289;
TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1289->bool_taskFound_false_1290;
bool_taskFound_false_1290->while_1291;
while_1291->if_1292;
if_1292->if_1293;
if_1293->if_1294;
if_1294->taskPtr_tasksIt_m_taskPtr_1295;
taskPtr_tasksIt_m_taskPtr_1295->tasksIt_m_taskPtr_0_1296;
if_1293->else_1299;
else_1299->if_1300;
if_1300->taskPtr_tasksIt_m_taskPtr_1301;
tasksIt_m_taskPtr_0_1296->m_finishedTasks_erase_tasksIt_1304;
if_1294->m_finishedTasks_erase_tasksIt_1304;
taskPtr_tasksIt_m_taskPtr_1301->m_finishedTasks_erase_tasksIt_1304;
if_1300->m_finishedTasks_erase_tasksIt_1304;
m_finishedTasks_erase_tasksIt_1304->taskFound_true_1305;
if_1292->tasksIt_1308;
tasksIt_1308->while_1291;
while_1291->if_1310;
taskFound_true_1305->if_1310;
if_1310->tasksIt_m_activeTasks_begin_1311;
tasksIt_m_activeTasks_begin_1311->tasksItEnd_m_activeTasks_end_1312;
tasksItEnd_m_activeTasks_end_1312->while_1313;
while_1313->if_1314;
if_1314->if_1315;
if_1315->if_1316;
if_1316->taskPtr_tasksIt_m_taskPtr_1317;
taskPtr_tasksIt_m_taskPtr_1317->tasksIt_m_taskPtr_0_1318;
if_1315->else_1321;
else_1321->if_1322;
if_1322->taskPtr_tasksIt_m_taskPtr_1323;
tasksIt_m_taskPtr_0_1318->m_activeTasks_erase_tasksIt_1326;
if_1316->m_activeTasks_erase_tasksIt_1326;
taskPtr_tasksIt_m_taskPtr_1323->m_activeTasks_erase_tasksIt_1326;
if_1322->m_activeTasks_erase_tasksIt_1326;
m_activeTasks_erase_tasksIt_1326->taskFound_true_1327;
if_1314->tasksIt_1330;
tasksIt_1330->while_1313;
while_1313->if_1333;
taskFound_true_1327->if_1333;
if_1310->if_1333;
if_1333->if_1334;
if_1334->m_nextValidFreeTaskId_0_1335;
m_nextValidFreeTaskId_0_1335->m_freeTasksIds_clear_1336;
m_freeTasksIds_clear_1336->return_1338;
if_1334->return_1338;
if_1333->else_1340;
else_1340->return_1341;
unique_lock_mutex_locker_m_mutex_1345->m_threadParameters_m_execCallBackPtr_newExecCallBack_1346;
unique_lock_mutex_locker_m_mutex_1459->TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1460;
TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1460->TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1461;
TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1461->while_1462;
while_1462->if_1463;
if_1463->return_1464;
if_1463->tasksIt_1466;
tasksIt_1466->while_1462;
while_1462->tasksIt_m_activeTasks_begin_1468;
tasksIt_m_activeTasks_begin_1468->tasksItEnd_m_activeTasks_end_1469;
tasksItEnd_m_activeTasks_end_1469->while_1470;
while_1470->if_1471;
if_1471->return_1472;
if_1471->tasksIt_1474;
tasksIt_1474->while_1470;
while_1470->return_1476;
unique_lock_mutex_locker_m_mutex_1479->TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1480;
TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1480->TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1481;
TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1481->while_1482;
while_1482->if_1483;
if_1483->taskStatus_tasksIt_m_status_1484;
taskStatus_tasksIt_m_status_1484->return_1485;
if_1483->tasksIt_1487;
tasksIt_1487->while_1482;
while_1482->tasksIt_m_activeTasks_begin_1489;
tasksIt_m_activeTasks_begin_1489->tasksItEnd_m_activeTasks_end_1490;
tasksItEnd_m_activeTasks_end_1490->while_1491;
while_1491->if_1492;
if_1492->taskStatus_tasksIt_m_status_1493;
taskStatus_tasksIt_m_status_1493->return_1494;
if_1492->tasksIt_1496;
tasksIt_1496->while_1491;
while_1491->return_1498;
return_1485->final;
return_1494->final;
return_1498->final;
TasksContainerKeyType_1101->AA_1102;
TasksContainerKeyType_1101->TasksContainerKeyType_1101;
TasksContainerKeyType_1103->TasksContainerKeyType_1101;
TasksContainerKeyType_1106->TasksContainerKeyType_1101;
Task_1655->AA_1656;
m_takeTasksOwnership_other_m_takeTasksOwnership_1117->Task_1655;
ThreadsVector_1122->AA_1123;
ThreadsVector_1122->ThreadsVector_1122;
ThreadsVector_1124->ThreadsVector_1122;
clear_1141->for_1142;
clear_1125->clear_1141;
m_threads_clear_1145->clear_1125;
ThreadsVector_1127->ThreadsVector_1122;
add_1132->m_threads_push_back_shared_ptr_thread_threadPtr_1133;
add_1132->add_1132;
m_threads_push_back_shared_ptr_thread_threadPtr_1133->add_1132;
empty_1135->return_1136;
empty_1135->empty_1135;
return_1136->empty_1135;
size_1138->return_1139;
size_1138->size_1138;
return_1139->size_1138;
clear_1141->clear_1141;
m_threads_clear_1145->clear_1141;
m_threads_clear_1145->clear_1141;
m_threads_clear_1145->m_threads_clear_1145;
ExecuterStatusHandler_1147->unique_lock_mutex_locker_mutexPtr_1148;
ExecuterStatusHandler_1147->ExecuterStatusHandler_1147;
m_executerStatusPtr_ACTIVE_EXECUTER_1153->ExecuterStatusHandler_1147;
ExecuterStatusHandler_1155->ExecuterStatusHandler_1147;
m_executerStatusPtr_ACTIVE_EXECUTER_1153->ExecuterStatusHandler_1155;
Executer_1162->reset_1163;
Executer_1162->Executer_1162;
reset_1163->Executer_1162;
reset_1348->m_executerStatus_INACTIVE_EXECUTER_1349;
reset_1163->reset_1348;
m_threadParameters_m_executerStatusPtr_m_executerStatus_1368->reset_1163;
Executer_1165->Executer_1162;
reset_1163->Executer_1165;
reset_1166->reset_1348;
m_threadParameters_m_executerStatusPtr_m_executerStatus_1368->reset_1166;
Executer_1168->Executer_1162;
reset_1163->Executer_1168;
stopExecution_1236->unique_lock_mutex_locker_m_mutex_1237;
stopExecution_1175->stopExecution_1236;
m_threadsExecutionCommand_oldThreadsExecutionCommand_1245->stopExecution_1175;
reset_1177->reset_1348;
m_threadParameters_m_executerStatusPtr_m_executerStatus_1368->reset_1177;
m_takeTasksOwnership_takeTasksOwnership_1178->Task_1655;
case_1180->_1181;
case_1180->case_1180;
_1181->case_1180;
case_1187->case_1180;
_1181->case_1187;
case_1194->case_1180;
_1181->case_1194;
startExecution_1205->unique_lock_mutex_locker_m_mutex_1206;
startExecution_1205->startExecution_1205;
throw_runtime_error_Invalid_execution_mode_1232->startExecution_1205;
threadFunction_1387->unique_lock_mutex_locker_threadParametersPtr_m_mutexPtr_defer_lock_1388;
threadFunction_m_threadParameters_1211->threadFunction_1387;
return_1398->threadFunction_m_threadParameters_1211;
return_1421->threadFunction_m_threadParameters_1211;
return_1448->threadFunction_m_threadParameters_1211;
locker_unlock_1451->threadFunction_m_threadParameters_1211;
threadFunction_m_threadParameters_1217->threadFunction_1387;
return_1398->threadFunction_m_threadParameters_1217;
return_1421->threadFunction_m_threadParameters_1217;
return_1448->threadFunction_m_threadParameters_1217;
locker_unlock_1451->threadFunction_m_threadParameters_1217;
m_threadsVector_add_new_thread_threadFunction_m_threadParameters_1226->add_1132;
m_threads_push_back_shared_ptr_thread_threadPtr_1133->m_threadsVector_add_new_thread_threadFunction_m_threadParameters_1226;
stopExecution_1236->stopExecution_1236;
m_threadsExecutionCommand_oldThreadsExecutionCommand_1245->stopExecution_1236;
ThreadsExecCommand_1525->AA1526;
const_ThreadsExecCommand_oldThreadsExecutionCommand_m_threadsExecutionCommand_1239->ThreadsExecCommand_1525;
m_threadsVector_clear_1243->clear_1141;
m_threads_clear_1145->m_threadsVector_clear_1243;
waitExecution_1248->unique_lock_mutex_locker_m_mutex_1249;
waitExecution_1248->waitExecution_1248;
m_threadsExecutionCommand_oldThreadsExecutionCommand_1256->waitExecution_1248;
const_ThreadsExecCommand_oldThreadsExecutionCommand_m_threadsExecutionCommand_1251->ThreadsExecCommand_1525;
m_threadsVector_clear_1255->clear_1141;
m_threads_clear_1145->m_threadsVector_clear_1255;
getExecutionMode_1259->unique_lock_mutex_locker_m_mutex_1260;
getExecutionMode_1259->getExecutionMode_1259;
return_1261->getExecutionMode_1259;
getExecuterStatus_1263->Executer_1162;
reset_1163->getExecuterStatus_1263;
addTask_1267->add_1132;
m_threads_push_back_shared_ptr_thread_threadPtr_1133->addTask_1267;
TasksContainerKeyType_key_1269->TasksContainerKeyType_1101;
key_m_takeTasksOwnership_m_takeTasksOwnership_1273->Task_1655;
m_activeTasks_push_back_key_1279->Task_1655;
removeTask_1286->unique_lock_mutex_locker_m_mutex_1287;
removeTask_1286->removeTask_1286;
return_1338->removeTask_1286;
return_1341->removeTask_1286;
TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1288->Task_1655;
TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1289->Task_1655;
m_finishedTasks_erase_tasksIt_1304->Task_1655;
tasksIt_m_activeTasks_begin_1311->Task_1655;
tasksItEnd_m_activeTasks_end_1312->Task_1655;
m_activeTasks_erase_tasksIt_1326->Task_1655;
m_nextValidFreeTaskId_0_1335->Task_1655;
m_freeTasksIds_clear_1336->clear_1141;
m_threads_clear_1145->m_freeTasksIds_clear_1336;
setCallBack_1344->unique_lock_mutex_locker_m_mutex_1345;
setCallBack_1344->setCallBack_1344;
m_threadParameters_m_execCallBackPtr_newExecCallBack_1346->setCallBack_1344;
reset_1348->reset_1348;
m_threadParameters_m_executerStatusPtr_m_executerStatus_1368->reset_1348;
m_takeTasksOwnership_false_1352->Task_1655;
m_nextValidFreeTaskId_0_1354->Task_1655;
m_activeTasks_clear_1355->clear_1141;
m_threads_clear_1145->m_activeTasks_clear_1355;
m_finishedTasks_clear_1356->clear_1141;
m_threads_clear_1145->m_finishedTasks_clear_1356;
m_threadsVector_clear_1357->clear_1141;
m_threads_clear_1145->m_threadsVector_clear_1357;
m_freeTasksIds_clear_1358->clear_1141;
m_threads_clear_1145->m_freeTasksIds_clear_1358;
m_threadParameters_m_activeTasksPtr_m_activeTasks_1362->Task_1655;
m_threadParameters_m_finishedTasksPtr_m_finishedTasks_1363->Task_1655;
getUniqueTaskId_1370->if_1371;
getUniqueTaskId_1370->getUniqueTaskId_1370;
return_1373->getUniqueTaskId_1370;
return_1378->getUniqueTaskId_1370;
TaskIdType_returnValue_m_freeTasksIds_back_1382->getUniqueTaskId_1370;
return_1384->getUniqueTaskId_1370;
newId_m_nextValidFreeTaskId_1376->Task_1655;
m_nextValidFreeTaskId_1377->Task_1655;
TaskIdType_returnValue_m_freeTasksIds_back_1382->Task_1655;
m_freeTasksIds_pop_back_1383->Task_1655;
threadFunction_1387->threadFunction_1387;
return_1398->threadFunction_1387;
return_1421->threadFunction_1387;
return_1448->threadFunction_1387;
locker_unlock_1451->threadFunction_1387;
ExecuterStatusHandler_executerStatusHandlerInstance_threadParametersPtr_m_activeThreadsNumberCounterPtr_threadParametersPtr_m_executerStatusPtr_threadParametersPtr_m_mutexPtr_1390->ExecuterStatusHandler_1147;
m_executerStatusPtr_ACTIVE_EXECUTER_1153->ExecuterStatusHandler_executerStatusHandlerInstance_threadParametersPtr_m_activeThreadsNumberCounterPtr_threadParametersPtr_m_executerStatusPtr_threadParametersPtr_m_mutexPtr_1390;
TasksContainerType_iterator_activeTasksIt_1391->Task_1655;
TasksContainerType_iterator_activeTasksItEnd_1392->Task_1655;
TaskIdType_taskId_0_1393->Task_1655;
activeTasksIt_threadParametersPtr_m_activeTasksPtr_begin_1404->Task_1655;
activeTasksItEnd_threadParametersPtr_m_activeTasksPtr_end_1405->Task_1655;
activeTasksIt_1410->Task_1655;
activeTasksIt_m_status_EXECUTING_1425->Task_1655;
taskId_activeTasksIt_m_id_1426->Task_1655;
activeTasksIt_m_taskPtr_execute_1432->Task_1655;
BasicResult_1599->AA_1600;
const_TaskExecutionResult_BasicResult_basicResult_activeTasksIt_m_taskPtr_getExecutionResult_getBasicResult_1437->BasicResult_1599;
activeTasksIt_m_status_FINISHED_1438->Task_1655;
threadParametersPtr_m_finishedTasksPtr_push_back_activeTasksIt_1439->Task_1655;
threadParametersPtr_m_activeTasksPtr_erase_activeTasksIt_1440->Task_1655;
isTaskPresent_1458->unique_lock_mutex_locker_m_mutex_1459;
isTaskPresent_1458->isTaskPresent_1458;
return_1464->isTaskPresent_1458;
return_1472->isTaskPresent_1458;
return_1476->isTaskPresent_1458;
TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1460->Task_1655;
TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1461->Task_1655;
tasksIt_m_activeTasks_begin_1468->Task_1655;
tasksItEnd_m_activeTasks_end_1469->Task_1655;
getTaskStatus_1478->unique_lock_mutex_locker_m_mutex_1479;
getTaskStatus_1478->getTaskStatus_1478;
return_1485->getTaskStatus_1478;
return_1494->getTaskStatus_1478;
return_1498->getTaskStatus_1478;
TasksContainerType_iterator_tasksIt_m_finishedTasks_begin_1480->Task_1655;
TasksContainerType_iterator_tasksItEnd_m_finishedTasks_end_1481->Task_1655;
tasksIt_m_activeTasks_begin_1489->Task_1655;
tasksItEnd_m_activeTasks_end_1490->Task_1655;
}